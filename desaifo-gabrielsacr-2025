class AbrigoAnimais {
  constructor() {
    this.animais = {
      Rex: { tipo: 'cão', brinquedos: ['RATO', 'BOLA'] },
      Mimi: { tipo: 'gato', brinquedos: ['BOLA', 'LASER'] },
      Fofo: { tipo: 'gato', brinquedos: ['BOLA', 'RATO', 'LASER'] },
      Zero: { tipo: 'gato', brinquedos: ['RATO', 'BOLA'] },
      Bola: { tipo: 'cão', brinquedos: ['CAIXA', 'NOVELO'] },
      Bebe: { tipo: 'cão', brinquedos: ['LASER', 'RATO', 'BOLA'] },
      Loco: { tipo: 'jabuti', brinquedos: ['SKATE', 'RATO'] }
    };
    this.todosBrinquedos = new Set(
      Object.values(this.animais).flatMap(a => a.brinquedos)
    );
  }

  encontraPessoas(brinquedosPessoa1, brinquedosPessoa2, ordemAnimais) {
    const pessoa1 = brinquedosPessoa1.split(',').map(b => b.trim());
    const pessoa2 = brinquedosPessoa2.split(',').map(b => b.trim());
    const ordem = ordemAnimais.split(',').map(a => a.trim());

    // Validação de brinquedos duplicados ou inválidos
    if (new Set(pessoa1).size !== pessoa1.length || new Set(pessoa2).size !== pessoa2.length) {
      return { erro: 'Brinquedo inválido' };
    }
    if (
      !pessoa1.every(b => this.todosBrinquedos.has(b)) ||
      !pessoa2.every(b => this.todosBrinquedos.has(b))
    ) {
      return { erro: 'Brinquedo inválido' };
    }

    // Validação de animais duplicados ou inválidos
    if (new Set(ordem).size !== ordem.length) {
      return { erro: 'Animal inválido' };
    }
    if (!ordem.every(a => this.animais[a])) {
      return { erro: 'Animal inválido' };
    }

    const resultado = [];
    const adotados1 = [];
    const adotados2 = [];

    for (const nome of ordem) {
      const animal = this.animais[nome];
      const brinquedos = animal.brinquedos;

      const pessoa1Tem = this.temBrinquedos(pessoa1, brinquedos, animal.tipo !== 'jabuti');
      const pessoa2Tem = this.temBrinquedos(pessoa2, brinquedos, animal.tipo !== 'jabuti');

      let destino = 'abrigo';

      if (animal.tipo === 'jabuti') {
        // Loco só vai com alguém que já tenha adotado outro animal
        if (adotados1.length > 0) destino = 'pessoa 1';
        else if (adotados2.length > 0) destino = 'pessoa 2';
      } else if (pessoa1Tem && !pessoa2Tem && adotados1.length < 3) {
        destino = 'pessoa 1';
      } else if (!pessoa1Tem && pessoa2Tem && adotados2.length < 3) {
        destino = 'pessoa 2';
      } else if (pessoa1Tem && pessoa2Tem) {
        destino = 'abrigo';
      }

      if (destino === 'pessoa 1') adotados1.push(nome);
      if (destino === 'pessoa 2') adotados2.push(nome);

      resultado.push(`${nome} - ${destino}`);
    }

    return { lista: resultado.sort() };
  }

  temBrinquedos(pessoaBrinquedos, brinquedosFavoritos, precisaOrdem) {
    if (precisaOrdem) {
      let index = 0;
      for (const brinquedo of pessoaBrinquedos) {
        if (brinquedo === brinquedosFavoritos[index]) {
          index++;
        }
        if (index === brinquedosFavoritos.length) return true;
      }
      return false;
    } else {
      return brinquedosFavoritos.every(b => pessoaBrinquedos.includes(b));
    }
  }
}

export { AbrigoAnimais as AbrigoAnimais };

